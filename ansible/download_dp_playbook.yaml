---
- name: Migrating a DataPower domain
  hosts: localhost
  connection: local
  gather_facts: no
  collections:
  - kubernetes.core
  vars_prompt:
    - name: domain
      prompt: "What is the domain name to export?"
      private: false

  vars:
    - DPDevUrl: rest-gw-dev.itzroks-310000c4fc-y6drs8-6ccd7f378ae819553d37d5f2ee142bd6-0000.eu-de.containers.appdomain.cloud
    - repo_url: https://github.com/giovanni-savino/datapower-container-cicd
    - zip_url: /tmp/{{ domain }}_unzipped
    - git_url: "{{ zip_url }}/git"
  tasks:
  - debug:
      msg: "Exporting datapower domain {{ domain }} from cluster {{DPDevUrl }}"
      
  - name: Removing old directory
    ansible.builtin.file:
      path: /tmp/{{ domain }}_unzipped
      state: absent

  - name: Creating tmp directory
    ansible.builtin.file:
      path: "{{zip_url }}"
      state: directory
      mode: '0755'

  - name: Exporting the domain {{ domain }} from Dev environment
    uri:
      url: https://{{ DPDevUrl }}/mgmt/actionqueue/{{ domain }}
      method: POST
      dest: "{{zip_url }}/DPRest.json"
      body_format: json
      body: '{"ExportAPIGWConfig":{}}'
      validate_certs: no
      user: "admin"
      password: "admin"
      force_basic_auth: true

  - name: Reading json and creating a zip
    shell: cat {{zip_url }}/DPRest.json | jq -r .Configuration | base64 --decode > /tmp/DPRest.zip 
  
  - name: Unzip file
    ansible.builtin.unarchive:
      src: /tmp/DPRest.zip
      dest: "{{ zip_url }}"
  
  - name: Check if local exists
    stat:
      path: "{{ zip_url }}/local"
    register: local_exists

  - name: Check if init cfg exists
    stat:
      path: "{{ zip_url }}/config/datapower-operator-{{ domain }}-init.cfg"
    register: init_exists

  - name: Creating tar.gz of local
    archive:
      path: "{{zip_url }}/local"
      dest: "{{ zip_url }}/{{ domain}}-local.tar.gz"
      format: gz
    when: local_exists.stat.exists

  - name: Creating -cfg configmap
    shell: kubectl create configmap {{ (domain) | replace('_','-') | lower }}-cfg --from-file="{{ zip_url }}/config/{{ domain }}.cfg" --dry-run="client" --output="yaml" > {{zip_url }}/{{ domain }}-cfg.yaml

  - name: Creating init configmap
    shell: kubectl create configmap datapower-operator-{{ (domain) | replace('_','-') | lower }}-init-cfg --from-file="{{ zip_url }}/config/datapower-operator-{{ domain }}-init.cfg" --dry-run="client" --output="yaml" > {{zip_url }}/datapower-operator-{{ domain }}-init-cfg.yaml
    when: init_exists.stat.exists

  - name: Creating -local configmap
    shell: kubectl create configmap {{ (domain) | replace('_','-') | lower }}-local --from-file="{{zip_url }}/{{ domain}}-local.tar.gz" --dry-run="client" --output="yaml" > {{zip_url }}/{{ domain }}-local.yaml
    when: local_exists.stat.exists

  - name: Creating git directory
    ansible.builtin.file:
      path: /tmp/{{ domain }}_unzipped/git
      state: directory
      mode: '0755'

  - name: Clone git repo
    ansible.builtin.git:
      repo: "{{ repo_url }}"
      dest: "{{ git_url }}"
      clone: yes
      update: yes
  
  - name: Check if {{ domain }} exists
    stat:
      path: "{{ git_url }}/{{ domain }}"
    register: domain_exists

  - name: Creating domain directory if does not exits
    ansible.builtin.file:
      path: "{{ git_url }}/{{ domain }}"
      state: directory
      mode: '0755'
    when: domain_exists.stat.exists == False

  - name: Check if domain exists in the datapower service
    shell: cat {{ git_url }}/ansible/datapower_service.yaml
    register: result

  - name: Parse yaml into variable
    set_fact:
      my_yaml: "{{ result.stdout | from_yaml }}"

  - name: See all the domains  in the in the datapower service
    set_fact: 
      domains: "{{ domains | default([]) | union([item.name]) }}"
      domains_yaml: "{{ domains | default([]) | union([item]) }}"
    with_items: "{{ my_yaml.spec.domains}}"
  
  - name: Add domain if does not exists
    set_fact:
      my_yaml: "{{ my_yaml | combine(newdata, recursive=true) }}"
    vars: 
      newdata:
        spec:
          domains: "{{ domains_yaml | union(newdomain) }}"
      newdomain:
          - name: "{{ domain }}"
            dpApp:
              config:
                - "{{ domain }}-cfg"
    when: "domain not in {{ domains }}"   
          
  - name: Update the datapower service yaml file
    copy:
      content: '{{ my_yaml | to_nice_yaml }}'
      dest: "{{ git_url }}/datapower_service.yaml"
    when: "domain not in {{ domains }}"
  
  - name: Move file in the directory
    shell: mv {{ zip_url }}/*.yaml {{ git_url }}/{{ domain }}
  - name: Read git credential
    shell: cat /tmp/git_token
    register: git_token



